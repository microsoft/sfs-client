# Template: Installs WinGet from sources, caching the installation files if possible

parameters:
- name: wingetInstallationCache
  type: string
  default: 'winget-installation-cache'

steps:
- task: Cache@2
  inputs:
    key: 'cache-winget-installation'
    path: ${{ parameters.wingetInstallationCache }}

# Winget is not available in the Windows Server 2022 image. We can still install it in "experimental" mode manually though.
- task: PowerShell@2
  displayName: Install WinGet
  inputs:
    pwsh: true
    targetType: 'inline'
    script: |
      # Check it doesn't exist to avoid installing it without need
      if (!(Get-Command 'winget.exe' -CommandType Application -ErrorAction SilentlyContinue))
      {
        New-Item -ItemType Directory ${{ parameters.wingetInstallationCache }} -Force | Out-Null
        Set-Location ${{ parameters.wingetInstallationCache }}
        $ProgressPreference = "silentlyContinue"
        $WingetInstaller = "Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle"
        if (!(Test-Path $WingetInstaller))
        {
          Write-Host "Downloading Winget"
          Invoke-WebRequest -Uri https://github.com/microsoft/winget-cli/releases/download/v1.7.10582/$WingetInstaller -OutFile $WingetInstaller
        }
        $VCLibsInstaller = "Microsoft.VCLibs.x64.14.00.Desktop.appx"
        if (!(Test-Path $VCLibsInstaller))
        {
          Write-Host "Downloading Winget dependency VCLibs"
          Invoke-WebRequest -Uri https://aka.ms/$VCLibsInstaller -OutFile $VCLibsInstaller
        }
        $XamlInstaller = "Microsoft.UI.Xaml.2.8.x64.appx"
        if (!(Test-Path $XamlInstaller))
        {
          Write-Host "Downloading Winget dependency Xaml"
          Invoke-WebRequest -Uri https://github.com/microsoft/microsoft-ui-xaml/releases/download/v2.8.6/$XamlInstaller -OutFile $XamlInstaller
        }

        Import-Module -Name Appx -UseWindowsPowershell | Out-Null
        Add-AppxPackage $VCLibsInstaller
        Add-AppxPackage $XamlInstaller
        Add-AppxPackage $WingetInstaller
      }
